{"version":3,"sources":["svg/Ripple-1s-200px.svg","components/Spinner.js","components/Pagination.js","store/MainReducer.js","components/TableCellInfo.js","components/UserAddForm.js","store/Action-Types.js","components/DataTable.js","components/MainPage.js","components/Modal.js","components/ErrorIndicator.js","App.js","store/store.js","index.js"],"names":["module","exports","className","src","Spinner","style","width","margin","display","alt","Pagination","ItemsPerPage","totalUsersCount","setPage","currentPage","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagesCount","Math","ceil","pageNumbers","i","push","portionCount","onClick","filter","p","map","key","e","initialState","formModal","modal","profiles","loading","userSelect","errors","insertItemImHelper","array","action","newArray","slice","splice","index","TableCellInfo","clearCellData","firstName","description","address","streetAddress","city","state","zip","connect","closeModalForm","dispatch","type","saveFormData","x","payload","id","lastName","email","phone","formData","setFormData","onchange","target","name","parseFloat","value","createPortal","onSubmit","preventDefault","formSubmit","onChange","placeholder","required","document","body","clearData","openModalForm","useEffect","changeTable","cellInfo","setCellInfo","table","searchValue","changeSearchValue","currentValue","method","currentFilter","changeCurrentFilter","switchFilter","y","setFilter","sort","dynamicSort","property","sortOrder","substr","a","b","setCurrentPage","indexOfLastPost","indexOfFirstPost","currentPosts","Users","profile","scrollToRef","myRef","styling","useRef","ref","window","scrollTo","current","offsetTop","obj","Object","keys","some","tempKey","toString","toLowerCase","tempSearch","trim","includes","length","pageNumber","getUsers","axios","get","res","data","msg","message","ErrorIndicator","setModal","onClose","k","currentId","show","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.68143558.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Ripple-1s-200px.a80c5d39.svg\";","import React from \"react\";\r\nimport Spinner from '../svg/Ripple-1s-200px.svg'\r\nexport default ()=>{\r\n    return <div className={\"spinner\"}>\r\n        <img src={Spinner} style={{width: '200px', margin: 'auto', display: 'block'}} alt='loading...'/>\r\n    </div>\r\n}","import React, {useState} from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Pagination = ({ItemsPerPage = 12, totalUsersCount,setPage,currentPage}) => {\r\n\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * ItemsPerPage + 1;\r\n    let rightPortionPageNumber = portionNumber * ItemsPerPage;\r\n    let pagesCount = Math.ceil(totalUsersCount / ItemsPerPage);\r\n\r\n    const pageNumbers = [];\r\n    for (let i = 1; i <= Math.ceil(totalUsersCount / ItemsPerPage); i++) {\r\n        pageNumbers.push(i)\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / ItemsPerPage);\r\n    return (\r\n        <div className={\"center\"}>\r\n        <div className={\"pagination\"}>\r\n            {portionNumber > 1 && <button onClick={()=>{setPortionNumber(portionNumber - 1)}}>PREV</button>}\r\n            {pageNumbers\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className={currentPage === p?\"active\":\"\"}\r\n                                 key={p}\r\n                                 onClick={(e) => {setPage(p)}}>{p}</span>\r\n                })}\r\n\r\n            {portionCount > portionNumber && <button className={\"btn btn-outline-info\"} onClick={() => {\r\n                setPortionNumber(portionNumber + 1)}}>NEXT</button>}\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\nPagination.propTypes={\r\n    ItemsPerPage:PropTypes.number,\r\n    totalUsersCount:PropTypes.number.isRequired,\r\n    setPage:PropTypes.func.isRequired,\r\n    currentPage:PropTypes.number.isRequired\r\n}\r\n\r\nexport default Pagination;","import {\r\n    CLEAR_DATA,\r\n    CLOSE_MODAL,\r\n    CLOSE_MODAL_FORM,\r\n    DATA_ERROR,\r\n    GET_DATA,\r\n    OPEN_MODAL_FORM,\r\n    SAVE_FORM_DATA\r\n} from \"./Action-Types\";\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n    formModal:false,\r\n    modal:true,\r\n    profiles: [],\r\n    loading: false,\r\n    userSelect:false,\r\n    errors: null\r\n}\r\nfunction insertItemImHelper(array, action) {\r\n    let newArray = array.slice()\r\n    newArray.splice(action.index, 0, action)\r\n    return newArray\r\n}\r\nexport default function (state = initialState, action) {\r\n    const {type, payload} = action;\r\n    switch (type) {\r\n        case CLEAR_DATA:\r\n            return {...state,profiles:[],modal: true,loading: false}\r\n        case CLOSE_MODAL:\r\n            return {...state,modal: false,loading: true}\r\n        case GET_DATA:\r\n            return {...state, profiles: payload,loading: false}\r\n        case OPEN_MODAL_FORM:\r\n            return {...state,formModal: true}\r\n        case CLOSE_MODAL_FORM:\r\n            return {...state,formModal: false}\r\n        case SAVE_FORM_DATA:\r\n            return {...state,profiles: insertItemImHelper(state.profiles,payload)}\r\n        case DATA_ERROR:{\r\n            return {...state,errors:payload }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const minSource=`http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`\r\nexport const maxSource=`http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`\r\n\r\n//open modal form\r\nexport const openModalForm= ()=>(dispatch)=>{\r\n    dispatch({\r\n        type:OPEN_MODAL_FORM\r\n    })\r\n}\r\n//open modal form\r\nexport const closeModalForm= ()=>(dispatch)=>{\r\n    dispatch({\r\n        type:CLOSE_MODAL_FORM\r\n    })\r\n}\r\n//Save data form data\r\nexport const saveFormData=(x)=>(dispatch)=>{\r\n    dispatch({\r\n        type:SAVE_FORM_DATA,\r\n        payload:x\r\n    })\r\n    dispatch({\r\n        type:CLOSE_MODAL_FORM\r\n    })\r\n}\r\n\r\n// GET  users\r\nexport const getUsers = (x) => async (dispatch) => {\r\n    dispatch({\r\n        type:CLOSE_MODAL\r\n    })\r\n    try {\r\n        const res = await axios.get(x)\r\n        dispatch({\r\n            type: GET_DATA,\r\n            payload: res.data\r\n        })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: DATA_ERROR,\r\n            payload: {msg: err.message}\r\n        })\r\n    }\r\n}\r\n// Clear users\r\nexport const clearData = (x) => (dispatch) => {\r\n    dispatch({\r\n        type:CLEAR_DATA\r\n    })\r\n\r\n}","import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\nconst TableCellInfo=({clearCellData,firstName,description='undefined',address={streetAddress:'undefined',city:'undefined',state:'undefined',zip:'undefined'}})=>{\r\n    const {streetAddress,city,state,zip}=address\r\n    return(\r\n        <div className={\"TableCellInfo\"}>\r\n            <dl>\r\n            <dt>Выбран пользователь: <b>{firstName}</b></dt>\r\n            <dt>Описание:  <span >{description}</span></dt>\r\n            <dt>Адрес проживания:  <b>{streetAddress}</b></dt>\r\n            <dt>Город:  <b>{city}</b></dt>\r\n            <dt>Провинция/штат:  <b>{state}</b></dt>\r\n            <dt>Индекс:  <b>{zip}</b></dt>\r\n            </dl>\r\n            <button onClick={()=>{clearCellData()}}>close window</button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nTableCellInfo.propTypes={\r\n    clearCellData:PropTypes.func.isRequired,\r\n    firstName:PropTypes.string.isRequired,\r\n    description:PropTypes.string,\r\n    address:PropTypes.object\r\n}\r\n\r\nexport default TableCellInfo","import React, {useState} from \"react\";\r\nimport {createPortal} from \"react-dom\";\r\nimport {connect} from 'react-redux'\r\nimport {closeModalForm, saveFormData} from \"../store/MainReducer\";\r\nimport PropTypes from 'prop-types'\r\n\r\nconst UserAddForm=({formModal,closeModalForm,saveFormData})=>{\r\n    const [formData, setFormData] = useState({\r\n        id: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        phone: '',\r\n    })\r\n\r\n    const {id, firstName, lastName, email, phone, } = formData\r\n    const onchange = (e) => {\r\n        setFormData({...formData, [e.target.name]: e.target.name === 'id' ? parseFloat(e.target.value) : e.target.value})\r\n    }\r\n    const formSubmit=(e)=>{\r\n        e.preventDefault()\r\n        saveFormData(formData)\r\n        setFormData({\r\n            id: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            phone: '',\r\n        })\r\n    }\r\n\r\n    if (formModal) {\r\n    return createPortal(<div className={'modal'}>\r\n        <div className={\"center user-form\"}>\r\n            <h1 className=\"large text-primary\">ADD AN USER</h1>\r\n            <form className=\"form\" onSubmit={(e)=>formSubmit(e)}>\r\n                <div className=\"form-group\">\r\n                    <input value={id} onChange={e => onchange(e)} type=\"number\" placeholder=\"id\" name=\"id\"\r\n                           required/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input value={lastName} onChange={e => onchange(e)} type=\"text\" placeholder=\"lastName\"\r\n                           name=\"lastName\" required/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input value={firstName} onChange={e => onchange(e)} type=\"text\" placeholder=\"firstName\"\r\n                           name=\"firstName\" required/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input value={email} onChange={e => onchange(e)} type=\"email\" placeholder=\"email\"\r\n                           name=\"email\" required/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input value={phone} onChange={e => onchange(e)} type=\"tel\" placeholder=\"phone\"\r\n                           name=\"phone\" required/>\r\n                </div>\r\n                <input type=\"submit\" value={\"Добавить в таблицу\"} className=\"btn btn-primary my-1\"/>\r\n                <button className={\"userFormButton\"} onClick={()=>closeModalForm()}>CLOSE FORM</button>\r\n            </form>\r\n        </div>\r\n    </div>,document.body)}\r\n    return null\r\n}\r\n\r\nUserAddForm.propTypes={\r\n    formModal:PropTypes.bool.isRequired,\r\n    closeModalForm:PropTypes.func.isRequired,\r\n    saveFormData:PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps=(state)=>({\r\n    formModal:state.formModal\r\n})\r\nexport default connect(mapStateToProps,{closeModalForm,saveFormData})(UserAddForm);","export const GET_DATA='main/GET_DATA'\r\nexport const DATA_ERROR='main/DATA_ERROR'\r\nexport const CLOSE_MODAL='main/CLOSE_MODAL'\r\nexport const CLEAR_DATA='main/CLEAR_DATA'\r\nexport const OPEN_MODAL_FORM='main/OPEN_MODAL_FORM'\r\nexport const CLOSE_MODAL_FORM='main/CLOSE_MODAL_FORM'\r\nexport const SAVE_FORM_DATA='main/SAVE_FORM_DATA'\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport Pagination from \"./Pagination\";\r\nimport {clearData, openModalForm} from \"../store/MainReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport TableCellInfo from \"./TableCellInfo\";\r\nimport UserAddForm from \"./UserAddForm\";\r\n\r\nconst DataTable = ({profiles,clearData,openModalForm}) => {\r\n    useEffect(()=>{changeTable(profiles)},[\r\n        profiles\r\n    ])\r\n    const [cellInfo,setCellInfo]=useState(null)\r\n    const [table,changeTable]=useState(profiles)\r\n    const [searchValue,changeSearchValue]=useState('')\r\n    const [currentFilter,changeCurrentFilter]=useState({\r\n        currentValue:null,\r\n        method:null\r\n    })\r\n    const clearCellData=()=>{\r\n        setCellInfo(null)\r\n    }\r\n\r\n    const switchFilter=(x,y)=>{\r\n        changeCurrentFilter({...currentFilter,currentValue: x,method: y});\r\n    }\r\n    const setFilter=(x)=>{\r\n        if(x===currentFilter.currentValue&&method!==\"ascending\"){\r\n            changeTable([...table].sort(dynamicSort( '-' + x)))\r\n            switchFilter(x,\"ascending\");\r\n        }else if(x!==currentFilter.currentValue){\r\n            switchFilter(x,\"descending\");\r\n            changeTable([...table].sort(dynamicSort( x)))\r\n        }else{\r\n            switchFilter(null,null);\r\n            changeTable([...profiles])\r\n        }\r\n    }\r\n    function dynamicSort(property) {\r\n        let sortOrder = 1;\r\n        if(property[0] === \"-\") {\r\n            sortOrder = -1;\r\n            property = property.substr(1);\r\n        }\r\n        return function (a,b) {\r\n            const result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;\r\n            return result * sortOrder;\r\n        }\r\n    }\r\n    // sort address by city\r\n    // const filterAddress=(x)=>{\r\n    //     if(x===currentFilter.currentValue){\r\n    //         changeTable([...table].sort((x, y) =>(x.address.city < y.address.city)?1:-1))\r\n    //         switchFilter(x,\"ascending\");\r\n    //     }else if(x!==currentFilter.currentValue&&currentFilter.method!==\"descending\") {\r\n    //         switchFilter(x,\"descending\");\r\n    //         changeTable([...table].sort((x, y) =>(x.address.city > y.address.city)?1:-1))\r\n    //     }else {\r\n    //         switchFilter(null,null);\r\n    //         changeTable([...profiles])\r\n    //\r\n    //     }\r\n    // }\r\n//pagination props\r\n    const [currentPage,setCurrentPage]=useState(1)\r\n    const [ItemsPerPage]=useState(10)\r\n\r\n    const setPage=(pageNumber)=>setCurrentPage(pageNumber)\r\n\r\n    const indexOfLastPost=currentPage*ItemsPerPage\r\n    const indexOfFirstPost=indexOfLastPost-ItemsPerPage\r\n    const currentPosts = table.slice(indexOfFirstPost,indexOfLastPost)\r\n        //\r\n    const getTableCellData=(x)=>{\r\n        scrollToRef(myRef)\r\n        setCellInfo(x)\r\n    }\r\n\r\n    const Users = currentPosts.map((profile) => {\r\n        //because id's can be equal\r\n        return <tr key={profile.id+profile.phone} onClick={()=>getTableCellData(profile)}>\r\n            <td>{profile.id}</td>\r\n            <td>{profile.firstName}</td>\r\n            <td>{profile.lastName}</td>\r\n            <td>{profile.email}</td>\r\n            <td>{profile.phone}</td>\r\n        </tr>\r\n    })\r\n\r\n\r\n    const {currentValue,method}=currentFilter\r\n    function styling(x) {\r\n        return currentValue===x&&method===\"descending\"?\"descending\":currentValue===x&&method===\"ascending\"?\"ascending\":\"\"\r\n    }\r\n    // scroll page to info component\r\n    const myRef = useRef(null)\r\n    const scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop)\r\n    //\r\n    const filtration=(y)=>{\r\n        changeTable([...profiles].filter((obj) => {\r\n            return Object.keys(obj).some((key) => {\r\n                if (obj[key] !== null) {\r\n                    const tempKey = obj[key].toString().toLowerCase();\r\n                    const tempSearch = y.toLowerCase().trim();\r\n                    return tempKey.includes(tempSearch);\r\n                }\r\n                return null\r\n            });\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button onClick={()=>clearData()}> Return to source selection</button>\r\n            <h2 className={\"my-2\"}>Users Data</h2>\r\n\r\n            <div className={\"searchAndAdd\"}>\r\n                <button  onClick={()=> openModalForm(true)}>добавить</button>\r\n                <div>\r\n                    <input type=\"text\" value={searchValue} placeholder={\"search here...\"} onChange={(e)=>{changeSearchValue(e.target.value)}}/>\r\n                    <button  onClick={()=> filtration(searchValue)}>search</button>\r\n                </div>\r\n            </div>\r\n\r\n            <Pagination currentPage={currentPage} ItemsPerPage={ItemsPerPage} totalUsersCount={profiles.length} setPage={setPage}/>\r\n            <UserAddForm />\r\n            <table className={\"profiles\"}>\r\n                <thead>\r\n                <tr>\r\n                    <th className={styling(\"id\")} onClick={()=>{setFilter(\"id\")}}>ID</th>\r\n                    <th className={styling(\"firstName\")} onClick={()=>{setFilter(\"firstName\")}}>First Name</th>\r\n                    <th className={styling(\"lastName\")} onClick={()=>{setFilter(\"lastName\")}}>Last Name</th>\r\n                    <th className={styling(\"email\")} onClick={()=>{setFilter(\"email\")}}>E-mail</th>\r\n                    <th className={styling(\"phone\")} onClick={()=>{setFilter(\"phone\")}}>Phone Number</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>{Users}</tbody>\r\n            </table>\r\n            <div ref={myRef}>\r\n                {cellInfo?<TableCellInfo\r\n                    clearCellData={clearCellData}\r\n                    firstName={cellInfo.firstName}\r\n                    description={cellInfo.description}\r\n                    address={cellInfo.address}\r\n                />:null}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nDataTable.propTypes={\r\n    profiles:PropTypes.array.isRequired,\r\n    clearData:PropTypes.func.isRequired,\r\n    openModalForm:PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null,{clearData,openModalForm})( DataTable);","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport Spinner from './Spinner'\r\nimport PropTypes from 'prop-types'\r\nimport DataTable from \"./DataTable\";\r\n\r\nfunction MainPage({loading,profiles}) {\r\n    return (<>\r\n            {loading?<Spinner/>:profiles.length>0? <DataTable profiles={profiles}/>:<h4>Awaiting user selection...</h4>}\r\n            </>\r\n    );\r\n}\r\nconst mapStateToProps=(state)=>({\r\n    loading:state.loading,\r\n    profiles:state.profiles,\r\n\r\n})\r\nMainPage.propTypes={\r\n    loading:PropTypes.bool.isRequired,\r\n    profiles:PropTypes.array.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps,{})(MainPage);\r\n","import React from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUsers, maxSource, minSource } from \"../store/MainReducer\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Modal = ({ modal, getUsers }) => {\r\n  if (modal) {\r\n    return createPortal(\r\n      <div className={\"modal\"}>\r\n        <div className={\"center\"}>\r\n          <button\r\n            className={\"modal-button\"}\r\n            onClick={() => getUsers(minSource)}\r\n          >\r\n            Display little table\r\n          </button>\r\n          <button\r\n            className={\"modal-button\"}\r\n            onClick={() => getUsers(maxSource)}\r\n          >\r\n            Display BIG table\r\n          </button>\r\n        </div>\r\n      </div>,\r\n      document.body\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nModal.propTypes = {\r\n  modal: PropTypes.bool.isRequired,\r\n  getUsers: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  modal: state.modal,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getUsers })(Modal);\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nconst ErrorIndicator = ({errors}) => {\r\n    return <div className={\"center error-indicator\"}>\r\n            {errors.msg}\r\n            <p>Please,try again</p>\r\n    </div>\r\n\r\n}\r\nErrorIndicator.propTypes={\r\n    errors:PropTypes.object.isRequired\r\n}\r\n\r\nexport default ErrorIndicator\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport MainPage from \"./components/MainPage\";\nimport Modal from \"./components/Modal\";\nimport ErrorIndicator from \"./components/ErrorIndicator\";\nimport {connect} from \"react-redux\";\nfunction App({errors}) {\n    const [modal, setModal] = useState(false)\n\n    const closeModal = (k) => {\n        if (k !== false) {\n            setModal(false)\n        }\n\n    }\n    if(errors){\n        return   <ErrorIndicator errors={errors}/>\n    }\n    return (\n        <>\n            < Modal id={modal} onClose={closeModal} currentId={modal} setModal={setModal} show={modal}/>\n            <MainPage/>\n</>\n    );\n}\nconst mapStateToProps=(state)=>({\n    errors:state.errors\n})\nexport default connect(mapStateToProps)(App);\n","import {createStore, applyMiddleware} from 'redux'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\nimport MainReducer from \"./MainReducer\";\r\n\r\nconst middleware=[thunk]\r\nconst store = createStore(MainReducer,composeWithDevTools(applyMiddleware(...middleware)))\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}